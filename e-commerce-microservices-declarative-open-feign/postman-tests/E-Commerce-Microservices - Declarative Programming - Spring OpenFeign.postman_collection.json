{
	"info": {
		"_postman_id": "fc8cebb4-c848-43e5-9d21-5c7b73ca24ea",
		"name": "E-Commerce-Microservices - Declarative Programming - Spring OpenFeign",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30165012"
	},
	"item": [
		{
			"name": "Create a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Check if customer created.\", function () {\r",
							"        pm.collectionVariables.set(\"userId\",jsonData.userId);\r",
							"        pm.expect(jsonData.userId).not.eql(undefined);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"emailAddress\": \"{{$randomEmail}}\",\r\n  \"address\": \"{{$randomStreetAddress}}\",\r\n  \"contactNumber\": \"{{$randomPhoneNumber}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Create a customer"
			},
			"response": []
		},
		{
			"name": "Get User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Check if aggregated data found.\", function () {\r",
							"        pm.expect(jsonData.orderId).not.eql(undefined);\r",
							"        pm.expect(jsonData.customer.customerId).not.eql(undefined);\r",
							"        pm.expect(jsonData.products[0].productId).not.eql(undefined);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Check if product created.\", function () {\r",
							"        pm.collectionVariables.set(\"productId\",jsonData.productId);\r",
							"        pm.expect(jsonData.productId).not.eql(undefined);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"rating\",_.random(1.0, 5.0));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"productDescription\": \"{{$randomProductName}}\",\r\n  \"seller\": \"{{$randomProduct}}\",\r\n  \"reviewRating\": {{rating}},\r\n  \"price\": {{$randomPrice}},\r\n  \"createDate\": \"2023-10-04\",\r\n  \"quantity\" : {{$randomInt}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Check if product created.\", function () {\r",
							"        pm.collectionVariables.set(\"productId\",jsonData.productId);\r",
							"        pm.expect(jsonData.productId).not.eql(undefined);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"rating\",_.random(1.0, 5.0));"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/products/{{productId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"{{productId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"    pm.test(\"Check if order created.\", function () {\r",
							"        pm.collectionVariables.set(\"orderId\",jsonData.orderId);\r",
							"        pm.expect(jsonData.orderId).not.eql(undefined);\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"productIds\": [\r\n    {{productId}}\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an Order with Invalid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": 10000000,\r\n  \"productIds\": [\r\n    {{productId}}\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an Order with Invalid Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"productIds\": [\r\n    120000,4522,485500\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8090",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "rating",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}