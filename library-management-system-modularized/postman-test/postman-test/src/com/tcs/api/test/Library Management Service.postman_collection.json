{
	"info": {
		"_postman_id": "eca35830-f83f-4ca7-bd06-09a3264bbfe0",
		"name": "Library Management Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30165012"
	},
	"item": [
		{
			"name": "Author-Service",
			"item": [
				{
					"name": "Create Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if author created.\", function () {\r",
									"        pm.collectionVariables.set(\"authorId\",jsonData.authorId);\r",
									"        pm.expect(jsonData.authorId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if author name returned.\", function () {\r",
									"        pm.expect(jsonData.firstName).not.eql(undefined);\r",
									"        pm.expect(jsonData.lastName).not.eql(undefined);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"emailAddress\": \"{{$randomEmail}}\",\n  \"bio\": \"{{$randomWords}}\",\n  \"country\": \"{{$randomCountry}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authorBaseUrl}}/authors",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"authorId\": \"<long>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if author available.\", function () {\r",
									"        pm.expect(jsonData.authorId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if author first name returned.\", function () {\r",
									"        pm.expect(jsonData.firstName).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if author last name returned.\", function () {\r",
									"        pm.expect(jsonData.lastName).not.eql(undefined);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{authorBaseUrl}}/authors/{{authorId}}",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authors/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"authorId\": \"<long>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if author available.\", function () {\r",
									"        pm.expect(jsonData.authorId).to.eql(pm.collectionVariables.get(\"authorId\"));\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if author first name matches.\", function () {\r",
									"        pm.expect(jsonData.firstName).to.eql('Test ' + pm.collectionVariables.get(\"authorId\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if author last name matches.\", function () {\r",
									"        pm.expect(jsonData.lastName).to.eql('Author ' + pm.collectionVariables.get(\"authorId\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if author email address matches.\", function () {\r",
									"        pm.expect(jsonData.emailAddress).to.eql('TestAuthor'+ pm.collectionVariables.get(\"authorId\")+'@example.com');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if author bio matches.\", function () {\r",
									"        pm.expect(jsonData.bio).to.eql('Test Author Bio '+ pm.collectionVariables.get(\"authorId\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if author country matches.\", function () {\r",
									"        pm.expect(jsonData.country).to.eql('Country'+ pm.collectionVariables.get(\"authorId\"));\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"authorId\": \"{{authorId}}\",\n  \"firstName\": \"Test {{authorId}}\",\n  \"lastName\": \"Author {{authorId}}\",\n  \"emailAddress\": \"TestAuthor{{authorId}}@example.com\",\n  \"bio\": \"Test Author Bio {{authorId}}\",\n  \"country\": \"Country{{authorId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authorBaseUrl}}/authors",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authorId\": \"<long>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/authors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"authorId\": \"<long>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get All Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{authorBaseUrl}}/authors",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"authorId\": \"<long>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"emailAddress\": \"<string>\",\n    \"bio\": \"<string>\",\n    \"country\": \"<string>\"\n  },\n  {\n    \"authorId\": \"<long>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"emailAddress\": \"<string>\",\n    \"bio\": \"<string>\",\n    \"country\": \"<string>\"\n  }\n]"
						}
					]
				}
			],
			"description": "Contains Author APIs"
		},
		{
			"name": "Book-Service",
			"item": [
				{
					"name": "Create Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if book created.\", function () {\r",
									"        pm.collectionVariables.set(\"bookId\",jsonData.bookId);\r",
									"        pm.expect(jsonData.bookId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if book title returned.\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.title).not.eql(undefined);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isbn\": \"{{$randomPhoneNumber}}\",\n  \"title\": \"{{$randomPhrase}}\",\n  \"edition\": \"{{$randomInt}}\",\n  \"category\": \"{{$randomColor}}\",\n  \"firstPublished\": \"1985-09-22\",\n  \"lastEditionDate\": \"2015-09-18\",\n  \"authorIds\": [\n    {{authorId}}\n  ],  \n  \"status\": \"AVAILABLE\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bookBaseUrl}}/books",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}"
						}
					]
				},
				{
					"name": "Get Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"    \r",
									"    pm.test(\"Check if book title returned.\", function () {\r",
									"        pm.expect(jsonData.title).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if book isbn returned.\", function () {\r",
									"        pm.expect(jsonData.isbn).not.eql(undefined);\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{bookBaseUrl}}/books/{{bookId}}",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}"
						}
					]
				},
				{
					"name": "Update Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if book available.\", function () {\r",
									"        pm.expect(jsonData.bookId).to.eql(pm.collectionVariables.get(\"bookId\"));\r",
									"    });\r",
									"    \r",
									"    pm.test(\"Check if book ISBN matches.\", function () {\r",
									"        pm.expect(jsonData.isbn).to.eql('ISBN' + pm.collectionVariables.get(\"bookId\"));\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if book title matches.\", function () {\r",
									"        pm.expect(jsonData.title).to.eql('Book Title ' + pm.collectionVariables.get(\"bookId\"));\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": \"{{bookId}}\",\n  \"isbn\": \"ISBN{{bookId}}\",\n  \"title\": \"Book Title {{bookId}}\",\n  \"edition\": \"{{bookId}}\",\n  \"category\": \"CAT{{bookId}}\",\n  \"firstPublished\": \"2000-10-10\",\n  \"lastEditionDate\": \"2000-10-10\",\n  \"authorIds\": [\n    \"1\"\n  ],\n  \"status\": \"AVAILABLE\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{bookBaseUrl}}/books",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}"
						}
					]
				},
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{bookBaseUrl}}/books",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"bookId\": \"<long>\",\n    \"isbn\": \"<string>\",\n    \"title\": \"<string>\",\n    \"edition\": \"<string>\",\n    \"category\": \"<string>\",\n    \"firstPublished\": \"<date>\",\n    \"lastEditionDate\": \"<date>\",\n    \"authorIds\": [\n      \"<long>\",\n      \"<long>\"\n    ],\n    \"status\": \"BORROWED\"\n  },\n  {\n    \"bookId\": \"<long>\",\n    \"isbn\": \"<string>\",\n    \"title\": \"<string>\",\n    \"edition\": \"<string>\",\n    \"category\": \"<string>\",\n    \"firstPublished\": \"<date>\",\n    \"lastEditionDate\": \"<date>\",\n    \"authorIds\": [\n      \"<long>\",\n      \"<long>\"\n    ],\n    \"status\": \"AVAILABLE\"\n  }\n]"
						}
					]
				}
			],
			"description": "Contains Author APIs"
		},
		{
			"name": "Borrowing-Service",
			"item": [
				{
					"name": "Add Borrowing Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if borrowing record created.\", function () {\r",
									"        pm.collectionVariables.set(\"userId\",jsonData.userId);\r",
									"        pm.collectionVariables.set(\"bookId\",jsonData.bookId);\r",
									"        pm.collectionVariables.set(\"borrowingRecordId\",jsonData.borrowingId);\r",
									"        pm.expect(jsonData.book.bookId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if book status updated.\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.book.status).to.eql('BORROWED');\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{bookId}},\n  \"borrowingDate\": \"2023-10-01\",\n  \"returnDate\": \"2023-11-01\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/borrowings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Borrowing Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if borrowing record present\" , function () {\r",
									"        pm.expect(jsonData.borrowingId).not.eql(undefined);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings/{{borrowingRecordId}}",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings",
								"{{borrowingRecordId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/borrowings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Borrowed Books By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if borrowing record present for user - \"+pm.collectionVariables.get(\"userId\"), function () {\r",
									"        pm.expect(jsonData[0].borrowingId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if borrowing record have book present for user - \"+pm.collectionVariables.get(\"userId\"), function () {\r",
									"        pm.expect(jsonData[0].books[0].bookId).not.eql(undefined);\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings/find-by-user/{{userId}}",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings",
								"find-by-user",
								"{{userId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/borrowings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update Borrowing Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"    pm.test(\"Check if borrowing record present\", function () {\r",
									"        pm.expect(jsonData.borrowingId).not.eql(undefined);\r",
									"    });\r",
									"\r",
									"    \r",
									"    pm.test(\"Check if borrowing record returnDate updated\", function () {\r",
									"        pm.expect(jsonData.returnDate).to.eql('2023-12-01');\r",
									"    });\r",
									"\r",
									"    pm.test(\"Check if borrowing record userId updated (old : \" + pm.collectionVariables.get(\"userId\")\r",
									"    + \" vs new : \" + jsonData.userId, function () {\r",
									"        pm.expect(jsonData.userId).not.eql(pm.collectionVariables.get(\"userId\"));\r",
									"        pm.collectionVariables.set(\"userId\", jsonData.userId)\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"borrowingId\": {{borrowingRecordId}},\n  \"bookId\": {{bookId}},\n  \"borrowingDate\": \"2023-10-01\",\n  \"returnDate\": \"2023-12-01\",\n  \"userId\": \"{{$randomUserName}}\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/borrowings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get All Records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/borrowings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"borrowingId\": \"<long>\",\n    \"bookId\": \"<long>\",\n    \"borrowingDate\": \"<date>\",\n    \"returnDate\": \"<date>\",\n    \"userId\": \"<string>\"\n  },\n  {\n    \"borrowingId\": \"<long>\",\n    \"bookId\": \"<long>\",\n    \"borrowingDate\": \"<date>\",\n    \"returnDate\": \"<date>\",\n    \"userId\": \"<string>\"\n  }\n]"
						}
					]
				}
			]
		},
		{
			"name": "Remove APIs",
			"item": [
				{
					"name": "Delete Author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{authorBaseUrl}}/authors/{{authorId}}",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/authors/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{bookBaseUrl}}/books/{{bookId}}",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Delete Borrowing Record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings/{{borrowingRecordId}}",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings",
								"{{borrowingRecordId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/borrowings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "Test If Records Deleted",
			"item": [
				{
					"name": "Get Author After Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{authorBaseUrl}}/authors/{{authorId}}",
							"host": [
								"{{authorBaseUrl}}"
							],
							"path": [
								"authors",
								"{{authorId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/authors/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"authors",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"authorId\": \"<long>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"emailAddress\": \"<string>\",\n  \"bio\": \"<string>\",\n  \"country\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Book After Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{bookBaseUrl}}/books/{{bookId}}",
							"host": [
								"{{bookBaseUrl}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/books/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"books",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"bookId\": \"<long>\",\n  \"isbn\": \"<string>\",\n  \"title\": \"<string>\",\n  \"edition\": \"<string>\",\n  \"category\": \"<string>\",\n  \"firstPublished\": \"<date>\",\n  \"lastEditionDate\": \"<date>\",\n  \"authorIds\": [\n    \"<long>\",\n    \"<long>\"\n  ],\n  \"status\": \"BORROWED\"\n}"
						}
					]
				},
				{
					"name": "Get Borrowing Record After Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{borrowBaseUrl}}/borrowings/{{borrowingRecordId}}",
							"host": [
								"{{borrowBaseUrl}}"
							],
							"path": [
								"borrowings",
								"{{borrowingRecordId}}"
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/borrowings/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"borrowings",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{\n  \"borrowingId\": \"<long>\",\n  \"bookId\": \"<long>\",\n  \"borrowingDate\": \"<date>\",\n  \"returnDate\": \"<date>\",\n  \"userId\": \"<string>\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authorBaseUrl",
			"value": "http://localhost:8889",
			"type": "string"
		},
		{
			"key": "bookBaseUrl",
			"value": "http://localhost:8890",
			"type": "string"
		},
		{
			"key": "borrowBaseUrl",
			"value": "http://localhost:8891",
			"type": "string"
		},
		{
			"key": "id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "authorId",
			"value": "1"
		},
		{
			"key": "bookId",
			"value": "1"
		},
		{
			"key": "userId",
			"value": "testUser"
		},
		{
			"key": "borrowingRecordId",
			"value": "1"
		}
	]
}